<?php

namespace App\Nova\Actions;

use App\Models\Instance;
use Carbon\Carbon;
use Exception;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Storage;
use Laravel\Nova\Actions\Action;
use Laravel\Nova\Fields\ActionFields;
use Symfony\Component\Process\Process;

class InstanceProcessing extends Action implements ShouldQueue
{
    use InteractsWithQueue, Queueable;

    /**
     * Perform the action on the given models.
     *
     * @param  \Laravel\Nova\Fields\ActionFields  $fields
     * @param  \Illuminate\Support\Collection  $models
     * @return mixed
     */
    public function handle(ActionFields $fields, Collection $models)
    {
        foreach ($models as $model) {
            try {
                $this->generateScriptFile($model);
                $this->markAsFinished($model);
            } catch (Exception $e) {
                $this->markAsFailed($model);
            }
        }
    }

    private function generateScriptFile(Instance $__model)
    {
        $now = Carbon::now();
        $path = "scripts/sources/script_file" . $now->timestamp . ".py";

        $modelVariables = "";
        foreach ($__model->template->templateProperties as $prop) {
            $variable = $prop->property->symbolic_name;
            $value = $__model->values["info"]["data"][$variable];

            $wrapper = "";

            if ($prop->property->dataType === 'string') $wrapper = "\"";

            $modelVariables .= "$variable=$wrapper$value$wrapper \n";
        }


        $fileHeader = <<<PRE
        """

        Automatically Generated by Emb3rs Platform
        generated at : $now

        """

        import numpy as np
        import pandas as pd
        import glob

        $modelVariables

        PRE;

        $template = $__model->template;

        $parentCategories = collect([]);

        $parentCategory = $template->category;

        while (!is_null($parentCategory)) {
            $parentCategories->push($parentCategory);
            $parentCategory = $parentCategory->parent;
        }

        $headers = $parentCategories->reverse()->map(function ($category) {

            return <<<PRE

            """
            START HEADER : [$category->name]
            """

            $category->header_script

            """
            END HEADER : [$category->name]
            """

            PRE;
        });


        $templateCode = <<<PRE

        """
        START SCRIPT : [$template->name]
        """

        $template->header_script

        """
        END SCRIPT : [$template->name]
        """

        PRE;


        $footers = $parentCategories->map(function ($category) {

            return <<<PRE

            """
            START FOOTER : [$category->name]
            """

            $category->footer_script

            """
            END FOOTER : [$category->name]
            """

            PRE;
        });


        Storage::put($path, $fileHeader);


        foreach ($headers as $header) {
            Storage::append($path, $header);
        }

        Storage::append($path, $templateCode);


        foreach ($footers as $footer) {
            Storage::append($path, $footer);
        }

        $process = new Process(['python3', Storage::path($path)]);
        $process->run();

        if (!$process->isSuccessful()) dd($process->getErrorOutput());
        dd($process->getOutput());
    }
}
